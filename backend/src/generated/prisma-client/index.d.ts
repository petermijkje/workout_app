// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  link: (where?: LinkWhereInput) => Promise<boolean>;
  profile: (where?: ProfileWhereInput) => Promise<boolean>;
  stat: (where?: StatWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  link: (where: LinkWhereUniqueInput) => LinkNullablePromise;
  links: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Link>;
  linksConnection: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LinkConnectionPromise;
  profile: (where: ProfileWhereUniqueInput) => ProfileNullablePromise;
  profiles: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Profile>;
  profilesConnection: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProfileConnectionPromise;
  stat: (where: StatWhereUniqueInput) => StatNullablePromise;
  stats: (args?: {
    where?: StatWhereInput;
    orderBy?: StatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Stat>;
  statsConnection: (args?: {
    where?: StatWhereInput;
    orderBy?: StatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StatConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VoteNullablePromise;
  votes: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vote>;
  votesConnection: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLink: (data: LinkCreateInput) => LinkPromise;
  updateLink: (args: {
    data: LinkUpdateInput;
    where: LinkWhereUniqueInput;
  }) => LinkPromise;
  updateManyLinks: (args: {
    data: LinkUpdateManyMutationInput;
    where?: LinkWhereInput;
  }) => BatchPayloadPromise;
  upsertLink: (args: {
    where: LinkWhereUniqueInput;
    create: LinkCreateInput;
    update: LinkUpdateInput;
  }) => LinkPromise;
  deleteLink: (where: LinkWhereUniqueInput) => LinkPromise;
  deleteManyLinks: (where?: LinkWhereInput) => BatchPayloadPromise;
  createProfile: (data: ProfileCreateInput) => ProfilePromise;
  updateProfile: (args: {
    data: ProfileUpdateInput;
    where: ProfileWhereUniqueInput;
  }) => ProfilePromise;
  updateManyProfiles: (args: {
    data: ProfileUpdateManyMutationInput;
    where?: ProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertProfile: (args: {
    where: ProfileWhereUniqueInput;
    create: ProfileCreateInput;
    update: ProfileUpdateInput;
  }) => ProfilePromise;
  deleteProfile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  deleteManyProfiles: (where?: ProfileWhereInput) => BatchPayloadPromise;
  createStat: (data: StatCreateInput) => StatPromise;
  updateStat: (args: {
    data: StatUpdateInput;
    where: StatWhereUniqueInput;
  }) => StatPromise;
  updateManyStats: (args: {
    data: StatUpdateManyMutationInput;
    where?: StatWhereInput;
  }) => BatchPayloadPromise;
  upsertStat: (args: {
    where: StatWhereUniqueInput;
    create: StatCreateInput;
    update: StatUpdateInput;
  }) => StatPromise;
  deleteStat: (where: StatWhereUniqueInput) => StatPromise;
  deleteManyStats: (where?: StatWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (args: {
    data: VoteUpdateInput;
    where: VoteWhereUniqueInput;
  }) => VotePromise;
  upsertVote: (args: {
    where: VoteWhereUniqueInput;
    create: VoteCreateInput;
    update: VoteUpdateInput;
  }) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  link: (
    where?: LinkSubscriptionWhereInput
  ) => LinkSubscriptionPayloadSubscription;
  profile: (
    where?: ProfileSubscriptionWhereInput
  ) => ProfileSubscriptionPayloadSubscription;
  stat: (
    where?: StatSubscriptionWhereInput
  ) => StatSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC";

export type VoteOrderByInput = "id_ASC" | "id_DESC";

export type StatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "deadlift_ASC"
  | "deadlift_DESC"
  | "squat_ASC"
  | "squat_DESC"
  | "benchpress_ASC"
  | "benchpress_DESC"
  | "shoulderpress_ASC"
  | "shoulderpress_DESC"
  | "sumopull_ASC"
  | "sumopull_DESC"
  | "frontsquat_ASC"
  | "frontsquat_DESC";

export type ProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "feet_ASC"
  | "feet_DESC"
  | "inches_ASC"
  | "inches_DESC"
  | "male_ASC"
  | "male_DESC"
  | "weight_ASC"
  | "weight_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type LinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  postedBy?: Maybe<UserWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  OR?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  NOT?: Maybe<LinkWhereInput[] | LinkWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  links_every?: Maybe<LinkWhereInput>;
  links_some?: Maybe<LinkWhereInput>;
  links_none?: Maybe<LinkWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  stats_every?: Maybe<StatWhereInput>;
  stats_some?: Maybe<StatWhereInput>;
  stats_none?: Maybe<StatWhereInput>;
  profiles_every?: Maybe<ProfileWhereInput>;
  profiles_some?: Maybe<ProfileWhereInput>;
  profiles_none?: Maybe<ProfileWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface VoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  links_every?: Maybe<LinkWhereInput>;
  links_some?: Maybe<LinkWhereInput>;
  links_none?: Maybe<LinkWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  OR?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  NOT?: Maybe<VoteWhereInput[] | VoteWhereInput>;
}

export interface StatWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  postedBy?: Maybe<UserWhereInput>;
  deadlift?: Maybe<Int>;
  deadlift_not?: Maybe<Int>;
  deadlift_in?: Maybe<Int[] | Int>;
  deadlift_not_in?: Maybe<Int[] | Int>;
  deadlift_lt?: Maybe<Int>;
  deadlift_lte?: Maybe<Int>;
  deadlift_gt?: Maybe<Int>;
  deadlift_gte?: Maybe<Int>;
  squat?: Maybe<Int>;
  squat_not?: Maybe<Int>;
  squat_in?: Maybe<Int[] | Int>;
  squat_not_in?: Maybe<Int[] | Int>;
  squat_lt?: Maybe<Int>;
  squat_lte?: Maybe<Int>;
  squat_gt?: Maybe<Int>;
  squat_gte?: Maybe<Int>;
  benchpress?: Maybe<Int>;
  benchpress_not?: Maybe<Int>;
  benchpress_in?: Maybe<Int[] | Int>;
  benchpress_not_in?: Maybe<Int[] | Int>;
  benchpress_lt?: Maybe<Int>;
  benchpress_lte?: Maybe<Int>;
  benchpress_gt?: Maybe<Int>;
  benchpress_gte?: Maybe<Int>;
  shoulderpress?: Maybe<Int>;
  shoulderpress_not?: Maybe<Int>;
  shoulderpress_in?: Maybe<Int[] | Int>;
  shoulderpress_not_in?: Maybe<Int[] | Int>;
  shoulderpress_lt?: Maybe<Int>;
  shoulderpress_lte?: Maybe<Int>;
  shoulderpress_gt?: Maybe<Int>;
  shoulderpress_gte?: Maybe<Int>;
  sumopull?: Maybe<Int>;
  sumopull_not?: Maybe<Int>;
  sumopull_in?: Maybe<Int[] | Int>;
  sumopull_not_in?: Maybe<Int[] | Int>;
  sumopull_lt?: Maybe<Int>;
  sumopull_lte?: Maybe<Int>;
  sumopull_gt?: Maybe<Int>;
  sumopull_gte?: Maybe<Int>;
  frontsquat?: Maybe<Int>;
  frontsquat_not?: Maybe<Int>;
  frontsquat_in?: Maybe<Int[] | Int>;
  frontsquat_not_in?: Maybe<Int[] | Int>;
  frontsquat_lt?: Maybe<Int>;
  frontsquat_lte?: Maybe<Int>;
  frontsquat_gt?: Maybe<Int>;
  frontsquat_gte?: Maybe<Int>;
  AND?: Maybe<StatWhereInput[] | StatWhereInput>;
  OR?: Maybe<StatWhereInput[] | StatWhereInput>;
  NOT?: Maybe<StatWhereInput[] | StatWhereInput>;
}

export interface ProfileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  postedBy?: Maybe<UserWhereInput>;
  feet?: Maybe<Int>;
  feet_not?: Maybe<Int>;
  feet_in?: Maybe<Int[] | Int>;
  feet_not_in?: Maybe<Int[] | Int>;
  feet_lt?: Maybe<Int>;
  feet_lte?: Maybe<Int>;
  feet_gt?: Maybe<Int>;
  feet_gte?: Maybe<Int>;
  inches?: Maybe<Int>;
  inches_not?: Maybe<Int>;
  inches_in?: Maybe<Int[] | Int>;
  inches_not_in?: Maybe<Int[] | Int>;
  inches_lt?: Maybe<Int>;
  inches_lte?: Maybe<Int>;
  inches_gt?: Maybe<Int>;
  inches_gte?: Maybe<Int>;
  male?: Maybe<Boolean>;
  male_not?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  weight_not?: Maybe<Int>;
  weight_in?: Maybe<Int[] | Int>;
  weight_not_in?: Maybe<Int[] | Int>;
  weight_lt?: Maybe<Int>;
  weight_lte?: Maybe<Int>;
  weight_gt?: Maybe<Int>;
  weight_gte?: Maybe<Int>;
  createdAt?: Maybe<String>;
  createdAt_not?: Maybe<String>;
  createdAt_in?: Maybe<String[] | String>;
  createdAt_not_in?: Maybe<String[] | String>;
  createdAt_lt?: Maybe<String>;
  createdAt_lte?: Maybe<String>;
  createdAt_gt?: Maybe<String>;
  createdAt_gte?: Maybe<String>;
  createdAt_contains?: Maybe<String>;
  createdAt_not_contains?: Maybe<String>;
  createdAt_starts_with?: Maybe<String>;
  createdAt_not_starts_with?: Maybe<String>;
  createdAt_ends_with?: Maybe<String>;
  createdAt_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  OR?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  NOT?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
}

export type ProfileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type StatWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type VoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LinkCreateInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
  postedBy?: Maybe<UserCreateOneWithoutLinksInput>;
  votes?: Maybe<VoteCreateManyWithoutLinksInput>;
}

export interface UserCreateOneWithoutLinksInput {
  create?: Maybe<UserCreateWithoutLinksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutLinksInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  stats?: Maybe<StatCreateManyWithoutPostedByInput>;
  profiles?: Maybe<ProfileCreateManyWithoutPostedByInput>;
}

export interface VoteCreateManyWithoutUserInput {
  create?: Maybe<VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface VoteCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  links?: Maybe<LinkCreateManyWithoutVotesInput>;
}

export interface LinkCreateManyWithoutVotesInput {
  create?: Maybe<LinkCreateWithoutVotesInput[] | LinkCreateWithoutVotesInput>;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
}

export interface LinkCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
  postedBy?: Maybe<UserCreateOneWithoutLinksInput>;
}

export interface StatCreateManyWithoutPostedByInput {
  create?: Maybe<
    StatCreateWithoutPostedByInput[] | StatCreateWithoutPostedByInput
  >;
  connect?: Maybe<StatWhereUniqueInput[] | StatWhereUniqueInput>;
}

export interface StatCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  deadlift: Int;
  squat: Int;
  benchpress: Int;
  shoulderpress: Int;
  sumopull: Int;
  frontsquat: Int;
}

export interface ProfileCreateManyWithoutPostedByInput {
  create?: Maybe<
    ProfileCreateWithoutPostedByInput[] | ProfileCreateWithoutPostedByInput
  >;
  connect?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
}

export interface ProfileCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  feet: Int;
  inches: Int;
  male: Boolean;
  weight: Int;
}

export interface VoteCreateManyWithoutLinksInput {
  create?: Maybe<VoteCreateWithoutLinksInput[] | VoteCreateWithoutLinksInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface VoteCreateWithoutLinksInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutVotesInput;
}

export interface UserCreateOneWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  stats?: Maybe<StatCreateManyWithoutPostedByInput>;
  profiles?: Maybe<ProfileCreateManyWithoutPostedByInput>;
}

export interface LinkCreateManyWithoutPostedByInput {
  create?: Maybe<
    LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput
  >;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
}

export interface LinkCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
  votes?: Maybe<VoteCreateManyWithoutLinksInput>;
}

export interface LinkUpdateInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneWithoutLinksInput>;
  votes?: Maybe<VoteUpdateManyWithoutLinksInput>;
}

export interface UserUpdateOneWithoutLinksInput {
  create?: Maybe<UserCreateWithoutLinksInput>;
  update?: Maybe<UserUpdateWithoutLinksDataInput>;
  upsert?: Maybe<UserUpsertWithoutLinksInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutLinksDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  stats?: Maybe<StatUpdateManyWithoutPostedByInput>;
  profiles?: Maybe<ProfileUpdateManyWithoutPostedByInput>;
}

export interface VoteUpdateManyWithoutUserInput {
  create?: Maybe<VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput>;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutUserInput[]
    | VoteUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutUserInput[]
    | VoteUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutUserDataInput;
}

export interface VoteUpdateWithoutUserDataInput {
  links?: Maybe<LinkUpdateManyWithoutVotesInput>;
}

export interface LinkUpdateManyWithoutVotesInput {
  create?: Maybe<LinkCreateWithoutVotesInput[] | LinkCreateWithoutVotesInput>;
  delete?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  set?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  disconnect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  update?: Maybe<
    | LinkUpdateWithWhereUniqueWithoutVotesInput[]
    | LinkUpdateWithWhereUniqueWithoutVotesInput
  >;
  upsert?: Maybe<
    | LinkUpsertWithWhereUniqueWithoutVotesInput[]
    | LinkUpsertWithWhereUniqueWithoutVotesInput
  >;
  deleteMany?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  updateMany?: Maybe<
    LinkUpdateManyWithWhereNestedInput[] | LinkUpdateManyWithWhereNestedInput
  >;
}

export interface LinkUpdateWithWhereUniqueWithoutVotesInput {
  where: LinkWhereUniqueInput;
  data: LinkUpdateWithoutVotesDataInput;
}

export interface LinkUpdateWithoutVotesDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneWithoutLinksInput>;
}

export interface LinkUpsertWithWhereUniqueWithoutVotesInput {
  where: LinkWhereUniqueInput;
  update: LinkUpdateWithoutVotesDataInput;
  create: LinkCreateWithoutVotesInput;
}

export interface LinkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  OR?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  NOT?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
}

export interface LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput;
  data: LinkUpdateManyDataInput;
}

export interface LinkUpdateManyDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutUserDataInput;
  create: VoteCreateWithoutUserInput;
}

export interface VoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  OR?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  NOT?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface StatUpdateManyWithoutPostedByInput {
  create?: Maybe<
    StatCreateWithoutPostedByInput[] | StatCreateWithoutPostedByInput
  >;
  delete?: Maybe<StatWhereUniqueInput[] | StatWhereUniqueInput>;
  connect?: Maybe<StatWhereUniqueInput[] | StatWhereUniqueInput>;
  set?: Maybe<StatWhereUniqueInput[] | StatWhereUniqueInput>;
  disconnect?: Maybe<StatWhereUniqueInput[] | StatWhereUniqueInput>;
  update?: Maybe<
    | StatUpdateWithWhereUniqueWithoutPostedByInput[]
    | StatUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | StatUpsertWithWhereUniqueWithoutPostedByInput[]
    | StatUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<StatScalarWhereInput[] | StatScalarWhereInput>;
  updateMany?: Maybe<
    StatUpdateManyWithWhereNestedInput[] | StatUpdateManyWithWhereNestedInput
  >;
}

export interface StatUpdateWithWhereUniqueWithoutPostedByInput {
  where: StatWhereUniqueInput;
  data: StatUpdateWithoutPostedByDataInput;
}

export interface StatUpdateWithoutPostedByDataInput {
  deadlift?: Maybe<Int>;
  squat?: Maybe<Int>;
  benchpress?: Maybe<Int>;
  shoulderpress?: Maybe<Int>;
  sumopull?: Maybe<Int>;
  frontsquat?: Maybe<Int>;
}

export interface StatUpsertWithWhereUniqueWithoutPostedByInput {
  where: StatWhereUniqueInput;
  update: StatUpdateWithoutPostedByDataInput;
  create: StatCreateWithoutPostedByInput;
}

export interface StatScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  deadlift?: Maybe<Int>;
  deadlift_not?: Maybe<Int>;
  deadlift_in?: Maybe<Int[] | Int>;
  deadlift_not_in?: Maybe<Int[] | Int>;
  deadlift_lt?: Maybe<Int>;
  deadlift_lte?: Maybe<Int>;
  deadlift_gt?: Maybe<Int>;
  deadlift_gte?: Maybe<Int>;
  squat?: Maybe<Int>;
  squat_not?: Maybe<Int>;
  squat_in?: Maybe<Int[] | Int>;
  squat_not_in?: Maybe<Int[] | Int>;
  squat_lt?: Maybe<Int>;
  squat_lte?: Maybe<Int>;
  squat_gt?: Maybe<Int>;
  squat_gte?: Maybe<Int>;
  benchpress?: Maybe<Int>;
  benchpress_not?: Maybe<Int>;
  benchpress_in?: Maybe<Int[] | Int>;
  benchpress_not_in?: Maybe<Int[] | Int>;
  benchpress_lt?: Maybe<Int>;
  benchpress_lte?: Maybe<Int>;
  benchpress_gt?: Maybe<Int>;
  benchpress_gte?: Maybe<Int>;
  shoulderpress?: Maybe<Int>;
  shoulderpress_not?: Maybe<Int>;
  shoulderpress_in?: Maybe<Int[] | Int>;
  shoulderpress_not_in?: Maybe<Int[] | Int>;
  shoulderpress_lt?: Maybe<Int>;
  shoulderpress_lte?: Maybe<Int>;
  shoulderpress_gt?: Maybe<Int>;
  shoulderpress_gte?: Maybe<Int>;
  sumopull?: Maybe<Int>;
  sumopull_not?: Maybe<Int>;
  sumopull_in?: Maybe<Int[] | Int>;
  sumopull_not_in?: Maybe<Int[] | Int>;
  sumopull_lt?: Maybe<Int>;
  sumopull_lte?: Maybe<Int>;
  sumopull_gt?: Maybe<Int>;
  sumopull_gte?: Maybe<Int>;
  frontsquat?: Maybe<Int>;
  frontsquat_not?: Maybe<Int>;
  frontsquat_in?: Maybe<Int[] | Int>;
  frontsquat_not_in?: Maybe<Int[] | Int>;
  frontsquat_lt?: Maybe<Int>;
  frontsquat_lte?: Maybe<Int>;
  frontsquat_gt?: Maybe<Int>;
  frontsquat_gte?: Maybe<Int>;
  AND?: Maybe<StatScalarWhereInput[] | StatScalarWhereInput>;
  OR?: Maybe<StatScalarWhereInput[] | StatScalarWhereInput>;
  NOT?: Maybe<StatScalarWhereInput[] | StatScalarWhereInput>;
}

export interface StatUpdateManyWithWhereNestedInput {
  where: StatScalarWhereInput;
  data: StatUpdateManyDataInput;
}

export interface StatUpdateManyDataInput {
  deadlift?: Maybe<Int>;
  squat?: Maybe<Int>;
  benchpress?: Maybe<Int>;
  shoulderpress?: Maybe<Int>;
  sumopull?: Maybe<Int>;
  frontsquat?: Maybe<Int>;
}

export interface ProfileUpdateManyWithoutPostedByInput {
  create?: Maybe<
    ProfileCreateWithoutPostedByInput[] | ProfileCreateWithoutPostedByInput
  >;
  delete?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  connect?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  set?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  disconnect?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  update?: Maybe<
    | ProfileUpdateWithWhereUniqueWithoutPostedByInput[]
    | ProfileUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | ProfileUpsertWithWhereUniqueWithoutPostedByInput[]
    | ProfileUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
  updateMany?: Maybe<
    | ProfileUpdateManyWithWhereNestedInput[]
    | ProfileUpdateManyWithWhereNestedInput
  >;
}

export interface ProfileUpdateWithWhereUniqueWithoutPostedByInput {
  where: ProfileWhereUniqueInput;
  data: ProfileUpdateWithoutPostedByDataInput;
}

export interface ProfileUpdateWithoutPostedByDataInput {
  feet?: Maybe<Int>;
  inches?: Maybe<Int>;
  male?: Maybe<Boolean>;
  weight?: Maybe<Int>;
}

export interface ProfileUpsertWithWhereUniqueWithoutPostedByInput {
  where: ProfileWhereUniqueInput;
  update: ProfileUpdateWithoutPostedByDataInput;
  create: ProfileCreateWithoutPostedByInput;
}

export interface ProfileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  feet?: Maybe<Int>;
  feet_not?: Maybe<Int>;
  feet_in?: Maybe<Int[] | Int>;
  feet_not_in?: Maybe<Int[] | Int>;
  feet_lt?: Maybe<Int>;
  feet_lte?: Maybe<Int>;
  feet_gt?: Maybe<Int>;
  feet_gte?: Maybe<Int>;
  inches?: Maybe<Int>;
  inches_not?: Maybe<Int>;
  inches_in?: Maybe<Int[] | Int>;
  inches_not_in?: Maybe<Int[] | Int>;
  inches_lt?: Maybe<Int>;
  inches_lte?: Maybe<Int>;
  inches_gt?: Maybe<Int>;
  inches_gte?: Maybe<Int>;
  male?: Maybe<Boolean>;
  male_not?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  weight_not?: Maybe<Int>;
  weight_in?: Maybe<Int[] | Int>;
  weight_not_in?: Maybe<Int[] | Int>;
  weight_lt?: Maybe<Int>;
  weight_lte?: Maybe<Int>;
  weight_gt?: Maybe<Int>;
  weight_gte?: Maybe<Int>;
  createdAt?: Maybe<String>;
  createdAt_not?: Maybe<String>;
  createdAt_in?: Maybe<String[] | String>;
  createdAt_not_in?: Maybe<String[] | String>;
  createdAt_lt?: Maybe<String>;
  createdAt_lte?: Maybe<String>;
  createdAt_gt?: Maybe<String>;
  createdAt_gte?: Maybe<String>;
  createdAt_contains?: Maybe<String>;
  createdAt_not_contains?: Maybe<String>;
  createdAt_starts_with?: Maybe<String>;
  createdAt_not_starts_with?: Maybe<String>;
  createdAt_ends_with?: Maybe<String>;
  createdAt_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
  OR?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
  NOT?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
}

export interface ProfileUpdateManyWithWhereNestedInput {
  where: ProfileScalarWhereInput;
  data: ProfileUpdateManyDataInput;
}

export interface ProfileUpdateManyDataInput {
  feet?: Maybe<Int>;
  inches?: Maybe<Int>;
  male?: Maybe<Boolean>;
  weight?: Maybe<Int>;
}

export interface UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput;
  create: UserCreateWithoutLinksInput;
}

export interface VoteUpdateManyWithoutLinksInput {
  create?: Maybe<VoteCreateWithoutLinksInput[] | VoteCreateWithoutLinksInput>;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutLinksInput[]
    | VoteUpdateWithWhereUniqueWithoutLinksInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutLinksInput[]
    | VoteUpsertWithWhereUniqueWithoutLinksInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface VoteUpdateWithWhereUniqueWithoutLinksInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutLinksDataInput;
}

export interface VoteUpdateWithoutLinksDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
}

export interface UserUpdateOneRequiredWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  update?: Maybe<UserUpdateWithoutVotesDataInput>;
  upsert?: Maybe<UserUpsertWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutVotesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  stats?: Maybe<StatUpdateManyWithoutPostedByInput>;
  profiles?: Maybe<ProfileUpdateManyWithoutPostedByInput>;
}

export interface LinkUpdateManyWithoutPostedByInput {
  create?: Maybe<
    LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput
  >;
  delete?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  set?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  disconnect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  update?: Maybe<
    | LinkUpdateWithWhereUniqueWithoutPostedByInput[]
    | LinkUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | LinkUpsertWithWhereUniqueWithoutPostedByInput[]
    | LinkUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  updateMany?: Maybe<
    LinkUpdateManyWithWhereNestedInput[] | LinkUpdateManyWithWhereNestedInput
  >;
}

export interface LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  data: LinkUpdateWithoutPostedByDataInput;
}

export interface LinkUpdateWithoutPostedByDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
  votes?: Maybe<VoteUpdateManyWithoutLinksInput>;
}

export interface LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  update: LinkUpdateWithoutPostedByDataInput;
  create: LinkCreateWithoutPostedByInput;
}

export interface UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput;
  create: UserCreateWithoutVotesInput;
}

export interface VoteUpsertWithWhereUniqueWithoutLinksInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutLinksDataInput;
  create: VoteCreateWithoutLinksInput;
}

export interface LinkUpdateManyMutationInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface ProfileCreateInput {
  id?: Maybe<ID_Input>;
  postedBy?: Maybe<UserCreateOneWithoutProfilesInput>;
  feet: Int;
  inches: Int;
  male: Boolean;
  weight: Int;
}

export interface UserCreateOneWithoutProfilesInput {
  create?: Maybe<UserCreateWithoutProfilesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutProfilesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  stats?: Maybe<StatCreateManyWithoutPostedByInput>;
}

export interface ProfileUpdateInput {
  postedBy?: Maybe<UserUpdateOneWithoutProfilesInput>;
  feet?: Maybe<Int>;
  inches?: Maybe<Int>;
  male?: Maybe<Boolean>;
  weight?: Maybe<Int>;
}

export interface UserUpdateOneWithoutProfilesInput {
  create?: Maybe<UserCreateWithoutProfilesInput>;
  update?: Maybe<UserUpdateWithoutProfilesDataInput>;
  upsert?: Maybe<UserUpsertWithoutProfilesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutProfilesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  stats?: Maybe<StatUpdateManyWithoutPostedByInput>;
}

export interface UserUpsertWithoutProfilesInput {
  update: UserUpdateWithoutProfilesDataInput;
  create: UserCreateWithoutProfilesInput;
}

export interface ProfileUpdateManyMutationInput {
  feet?: Maybe<Int>;
  inches?: Maybe<Int>;
  male?: Maybe<Boolean>;
  weight?: Maybe<Int>;
}

export interface StatCreateInput {
  id?: Maybe<ID_Input>;
  postedBy?: Maybe<UserCreateOneWithoutStatsInput>;
  deadlift: Int;
  squat: Int;
  benchpress: Int;
  shoulderpress: Int;
  sumopull: Int;
  frontsquat: Int;
}

export interface UserCreateOneWithoutStatsInput {
  create?: Maybe<UserCreateWithoutStatsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutStatsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  profiles?: Maybe<ProfileCreateManyWithoutPostedByInput>;
}

export interface StatUpdateInput {
  postedBy?: Maybe<UserUpdateOneWithoutStatsInput>;
  deadlift?: Maybe<Int>;
  squat?: Maybe<Int>;
  benchpress?: Maybe<Int>;
  shoulderpress?: Maybe<Int>;
  sumopull?: Maybe<Int>;
  frontsquat?: Maybe<Int>;
}

export interface UserUpdateOneWithoutStatsInput {
  create?: Maybe<UserCreateWithoutStatsInput>;
  update?: Maybe<UserUpdateWithoutStatsDataInput>;
  upsert?: Maybe<UserUpsertWithoutStatsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutStatsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  profiles?: Maybe<ProfileUpdateManyWithoutPostedByInput>;
}

export interface UserUpsertWithoutStatsInput {
  update: UserUpdateWithoutStatsDataInput;
  create: UserCreateWithoutStatsInput;
}

export interface StatUpdateManyMutationInput {
  deadlift?: Maybe<Int>;
  squat?: Maybe<Int>;
  benchpress?: Maybe<Int>;
  shoulderpress?: Maybe<Int>;
  sumopull?: Maybe<Int>;
  frontsquat?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  stats?: Maybe<StatCreateManyWithoutPostedByInput>;
  profiles?: Maybe<ProfileCreateManyWithoutPostedByInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  stats?: Maybe<StatUpdateManyWithoutPostedByInput>;
  profiles?: Maybe<ProfileUpdateManyWithoutPostedByInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface VoteCreateInput {
  id?: Maybe<ID_Input>;
  links?: Maybe<LinkCreateManyWithoutVotesInput>;
  user: UserCreateOneWithoutVotesInput;
}

export interface VoteUpdateInput {
  links?: Maybe<LinkUpdateManyWithoutVotesInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
}

export interface LinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LinkWhereInput>;
  AND?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  OR?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  NOT?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
}

export interface ProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProfileWhereInput>;
  AND?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  OR?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  NOT?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
}

export interface StatSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StatWhereInput>;
  AND?: Maybe<StatSubscriptionWhereInput[] | StatSubscriptionWhereInput>;
  OR?: Maybe<StatSubscriptionWhereInput[] | StatSubscriptionWhereInput>;
  NOT?: Maybe<StatSubscriptionWhereInput[] | StatSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VoteWhereInput>;
  AND?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  OR?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  NOT?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Link {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LinkNullablePromise
  extends Promise<Link | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  stats: <T = FragmentableArray<Stat>>(args?: {
    where?: StatWhereInput;
    orderBy?: StatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  profiles: <T = FragmentableArray<Profile>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  links: <T = Promise<AsyncIterator<LinkSubscription>>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  stats: <T = Promise<AsyncIterator<StatSubscription>>>(args?: {
    where?: StatWhereInput;
    orderBy?: StatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  profiles: <T = Promise<AsyncIterator<ProfileSubscription>>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  stats: <T = FragmentableArray<Stat>>(args?: {
    where?: StatWhereInput;
    orderBy?: StatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  profiles: <T = FragmentableArray<Profile>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Vote {
  id: ID_Output;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  links: <T = Promise<AsyncIterator<LinkSubscription>>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserSubscription>() => T;
}

export interface VoteNullablePromise
  extends Promise<Vote | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
}

export interface Stat {
  id: ID_Output;
  deadlift: Int;
  squat: Int;
  benchpress: Int;
  shoulderpress: Int;
  sumopull: Int;
  frontsquat: Int;
}

export interface StatPromise extends Promise<Stat>, Fragmentable {
  id: () => Promise<ID_Output>;
  postedBy: <T = UserPromise>() => T;
  deadlift: () => Promise<Int>;
  squat: () => Promise<Int>;
  benchpress: () => Promise<Int>;
  shoulderpress: () => Promise<Int>;
  sumopull: () => Promise<Int>;
  frontsquat: () => Promise<Int>;
}

export interface StatSubscription
  extends Promise<AsyncIterator<Stat>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  postedBy: <T = UserSubscription>() => T;
  deadlift: () => Promise<AsyncIterator<Int>>;
  squat: () => Promise<AsyncIterator<Int>>;
  benchpress: () => Promise<AsyncIterator<Int>>;
  shoulderpress: () => Promise<AsyncIterator<Int>>;
  sumopull: () => Promise<AsyncIterator<Int>>;
  frontsquat: () => Promise<AsyncIterator<Int>>;
}

export interface StatNullablePromise
  extends Promise<Stat | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  postedBy: <T = UserPromise>() => T;
  deadlift: () => Promise<Int>;
  squat: () => Promise<Int>;
  benchpress: () => Promise<Int>;
  shoulderpress: () => Promise<Int>;
  sumopull: () => Promise<Int>;
  frontsquat: () => Promise<Int>;
}

export interface Profile {
  id: ID_Output;
  feet: Int;
  inches: Int;
  male: Boolean;
  weight: Int;
  createdAt: String;
}

export interface ProfilePromise extends Promise<Profile>, Fragmentable {
  id: () => Promise<ID_Output>;
  postedBy: <T = UserPromise>() => T;
  feet: () => Promise<Int>;
  inches: () => Promise<Int>;
  male: () => Promise<Boolean>;
  weight: () => Promise<Int>;
  createdAt: () => Promise<String>;
}

export interface ProfileSubscription
  extends Promise<AsyncIterator<Profile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  postedBy: <T = UserSubscription>() => T;
  feet: () => Promise<AsyncIterator<Int>>;
  inches: () => Promise<AsyncIterator<Int>>;
  male: () => Promise<AsyncIterator<Boolean>>;
  weight: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<String>>;
}

export interface ProfileNullablePromise
  extends Promise<Profile | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  postedBy: <T = UserPromise>() => T;
  feet: () => Promise<Int>;
  inches: () => Promise<Int>;
  male: () => Promise<Boolean>;
  weight: () => Promise<Int>;
  createdAt: () => Promise<String>;
}

export interface LinkConnection {
  pageInfo: PageInfo;
  edges: LinkEdge[];
}

export interface LinkConnectionPromise
  extends Promise<LinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LinkEdge>>() => T;
  aggregate: <T = AggregateLinkPromise>() => T;
}

export interface LinkConnectionSubscription
  extends Promise<AsyncIterator<LinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLinkSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LinkEdge {
  node: Link;
  cursor: String;
}

export interface LinkEdgePromise extends Promise<LinkEdge>, Fragmentable {
  node: <T = LinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LinkEdgeSubscription
  extends Promise<AsyncIterator<LinkEdge>>,
    Fragmentable {
  node: <T = LinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLink {
  count: Int;
}

export interface AggregateLinkPromise
  extends Promise<AggregateLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLinkSubscription
  extends Promise<AsyncIterator<AggregateLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProfileConnection {
  pageInfo: PageInfo;
  edges: ProfileEdge[];
}

export interface ProfileConnectionPromise
  extends Promise<ProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileEdge>>() => T;
  aggregate: <T = AggregateProfilePromise>() => T;
}

export interface ProfileConnectionSubscription
  extends Promise<AsyncIterator<ProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileSubscription>() => T;
}

export interface ProfileEdge {
  node: Profile;
  cursor: String;
}

export interface ProfileEdgePromise extends Promise<ProfileEdge>, Fragmentable {
  node: <T = ProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileEdgeSubscription
  extends Promise<AsyncIterator<ProfileEdge>>,
    Fragmentable {
  node: <T = ProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProfile {
  count: Int;
}

export interface AggregateProfilePromise
  extends Promise<AggregateProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileSubscription
  extends Promise<AsyncIterator<AggregateProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StatConnection {
  pageInfo: PageInfo;
  edges: StatEdge[];
}

export interface StatConnectionPromise
  extends Promise<StatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StatEdge>>() => T;
  aggregate: <T = AggregateStatPromise>() => T;
}

export interface StatConnectionSubscription
  extends Promise<AsyncIterator<StatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StatEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStatSubscription>() => T;
}

export interface StatEdge {
  node: Stat;
  cursor: String;
}

export interface StatEdgePromise extends Promise<StatEdge>, Fragmentable {
  node: <T = StatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StatEdgeSubscription
  extends Promise<AsyncIterator<StatEdge>>,
    Fragmentable {
  node: <T = StatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStat {
  count: Int;
}

export interface AggregateStatPromise
  extends Promise<AggregateStat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStatSubscription
  extends Promise<AsyncIterator<AggregateStat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface LinkSubscriptionPayload {
  mutation: MutationType;
  node: Link;
  updatedFields: String[];
  previousValues: LinkPreviousValues;
}

export interface LinkSubscriptionPayloadPromise
  extends Promise<LinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinkPreviousValuesPromise>() => T;
}

export interface LinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinkPreviousValuesSubscription>() => T;
}

export interface LinkPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPreviousValuesPromise
  extends Promise<LinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface LinkPreviousValuesSubscription
  extends Promise<AsyncIterator<LinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface ProfileSubscriptionPayload {
  mutation: MutationType;
  node: Profile;
  updatedFields: String[];
  previousValues: ProfilePreviousValues;
}

export interface ProfileSubscriptionPayloadPromise
  extends Promise<ProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfilePreviousValuesPromise>() => T;
}

export interface ProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfilePreviousValuesSubscription>() => T;
}

export interface ProfilePreviousValues {
  id: ID_Output;
  feet: Int;
  inches: Int;
  male: Boolean;
  weight: Int;
  createdAt: String;
}

export interface ProfilePreviousValuesPromise
  extends Promise<ProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  feet: () => Promise<Int>;
  inches: () => Promise<Int>;
  male: () => Promise<Boolean>;
  weight: () => Promise<Int>;
  createdAt: () => Promise<String>;
}

export interface ProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<ProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  feet: () => Promise<AsyncIterator<Int>>;
  inches: () => Promise<AsyncIterator<Int>>;
  male: () => Promise<AsyncIterator<Boolean>>;
  weight: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<String>>;
}

export interface StatSubscriptionPayload {
  mutation: MutationType;
  node: Stat;
  updatedFields: String[];
  previousValues: StatPreviousValues;
}

export interface StatSubscriptionPayloadPromise
  extends Promise<StatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StatPreviousValuesPromise>() => T;
}

export interface StatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StatPreviousValuesSubscription>() => T;
}

export interface StatPreviousValues {
  id: ID_Output;
  deadlift: Int;
  squat: Int;
  benchpress: Int;
  shoulderpress: Int;
  sumopull: Int;
  frontsquat: Int;
}

export interface StatPreviousValuesPromise
  extends Promise<StatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  deadlift: () => Promise<Int>;
  squat: () => Promise<Int>;
  benchpress: () => Promise<Int>;
  shoulderpress: () => Promise<Int>;
  sumopull: () => Promise<Int>;
  frontsquat: () => Promise<Int>;
}

export interface StatPreviousValuesSubscription
  extends Promise<AsyncIterator<StatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  deadlift: () => Promise<AsyncIterator<Int>>;
  squat: () => Promise<AsyncIterator<Int>>;
  benchpress: () => Promise<AsyncIterator<Int>>;
  shoulderpress: () => Promise<AsyncIterator<Int>>;
  sumopull: () => Promise<AsyncIterator<Int>>;
  frontsquat: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface VotePreviousValues {
  id: ID_Output;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Link",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  },
  {
    name: "Stat",
    embedded: false
  },
  {
    name: "Profile",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
