module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateLink {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregateStat {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Link {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy: User
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type LinkConnection {
  pageInfo: PageInfo!
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  id: ID
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutLinksInput
  votes: VoteCreateManyWithoutLinksInput
}

input LinkCreateManyWithoutPostedByInput {
  create: [LinkCreateWithoutPostedByInput!]
  connect: [LinkWhereUniqueInput!]
}

input LinkCreateManyWithoutVotesInput {
  create: [LinkCreateWithoutVotesInput!]
  connect: [LinkWhereUniqueInput!]
}

input LinkCreateWithoutPostedByInput {
  id: ID
  description: String!
  url: String!
  votes: VoteCreateManyWithoutLinksInput
}

input LinkCreateWithoutVotesInput {
  id: ID
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutLinksInput
}

type LinkEdge {
  node: Link!
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
}

type LinkPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
}

input LinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [LinkScalarWhereInput!]
  OR: [LinkScalarWhereInput!]
  NOT: [LinkScalarWhereInput!]
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
  AND: [LinkSubscriptionWhereInput!]
  OR: [LinkSubscriptionWhereInput!]
  NOT: [LinkSubscriptionWhereInput!]
}

input LinkUpdateInput {
  description: String
  url: String
  postedBy: UserUpdateOneWithoutLinksInput
  votes: VoteUpdateManyWithoutLinksInput
}

input LinkUpdateManyDataInput {
  description: String
  url: String
}

input LinkUpdateManyMutationInput {
  description: String
  url: String
}

input LinkUpdateManyWithoutPostedByInput {
  create: [LinkCreateWithoutPostedByInput!]
  delete: [LinkWhereUniqueInput!]
  connect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [LinkScalarWhereInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
}

input LinkUpdateManyWithoutVotesInput {
  create: [LinkCreateWithoutVotesInput!]
  delete: [LinkWhereUniqueInput!]
  connect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutVotesInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutVotesInput!]
  deleteMany: [LinkScalarWhereInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
}

input LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput!
  data: LinkUpdateManyDataInput!
}

input LinkUpdateWithoutPostedByDataInput {
  description: String
  url: String
  votes: VoteUpdateManyWithoutLinksInput
}

input LinkUpdateWithoutVotesDataInput {
  description: String
  url: String
  postedBy: UserUpdateOneWithoutLinksInput
}

input LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateWithoutPostedByDataInput!
}

input LinkUpdateWithWhereUniqueWithoutVotesInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateWithoutVotesDataInput!
}

input LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateWithoutPostedByDataInput!
  create: LinkCreateWithoutPostedByInput!
}

input LinkUpsertWithWhereUniqueWithoutVotesInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateWithoutVotesDataInput!
  create: LinkCreateWithoutVotesInput!
}

input LinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  postedBy: UserWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
}

input LinkWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLink(data: LinkCreateInput!): Link!
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateManyLinks(data: LinkUpdateManyMutationInput!, where: LinkWhereInput): BatchPayload!
  upsertLink(where: LinkWhereUniqueInput!, create: LinkCreateInput!, update: LinkUpdateInput!): Link!
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  createProfile(data: ProfileCreateInput!): Profile!
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateManyProfiles(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
  createStat(data: StatCreateInput!): Stat!
  updateStat(data: StatUpdateInput!, where: StatWhereUniqueInput!): Stat
  updateManyStats(data: StatUpdateManyMutationInput!, where: StatWhereInput): BatchPayload!
  upsertStat(where: StatWhereUniqueInput!, create: StatCreateInput!, update: StatUpdateInput!): Stat!
  deleteStat(where: StatWhereUniqueInput!): Stat
  deleteManyStats(where: StatWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVote(data: VoteCreateInput!): Vote!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Profile {
  id: ID!
  postedBy: User
  feet: Int!
  inches: Int!
  male: Boolean!
  weight: Int!
}

type ProfileConnection {
  pageInfo: PageInfo!
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  id: ID
  postedBy: UserCreateOneWithoutProfilesInput
  feet: Int!
  inches: Int!
  male: Boolean!
  weight: Int!
}

input ProfileCreateManyWithoutPostedByInput {
  create: [ProfileCreateWithoutPostedByInput!]
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateWithoutPostedByInput {
  id: ID
  feet: Int!
  inches: Int!
  male: Boolean!
  weight: Int!
}

type ProfileEdge {
  node: Profile!
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  feet_ASC
  feet_DESC
  inches_ASC
  inches_DESC
  male_ASC
  male_DESC
  weight_ASC
  weight_DESC
}

type ProfilePreviousValues {
  id: ID!
  feet: Int!
  inches: Int!
  male: Boolean!
  weight: Int!
}

input ProfileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  feet: Int
  feet_not: Int
  feet_in: [Int!]
  feet_not_in: [Int!]
  feet_lt: Int
  feet_lte: Int
  feet_gt: Int
  feet_gte: Int
  inches: Int
  inches_not: Int
  inches_in: [Int!]
  inches_not_in: [Int!]
  inches_lt: Int
  inches_lte: Int
  inches_gt: Int
  inches_gte: Int
  male: Boolean
  male_not: Boolean
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  AND: [ProfileScalarWhereInput!]
  OR: [ProfileScalarWhereInput!]
  NOT: [ProfileScalarWhereInput!]
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
  AND: [ProfileSubscriptionWhereInput!]
  OR: [ProfileSubscriptionWhereInput!]
  NOT: [ProfileSubscriptionWhereInput!]
}

input ProfileUpdateInput {
  postedBy: UserUpdateOneWithoutProfilesInput
  feet: Int
  inches: Int
  male: Boolean
  weight: Int
}

input ProfileUpdateManyDataInput {
  feet: Int
  inches: Int
  male: Boolean
  weight: Int
}

input ProfileUpdateManyMutationInput {
  feet: Int
  inches: Int
  male: Boolean
  weight: Int
}

input ProfileUpdateManyWithoutPostedByInput {
  create: [ProfileCreateWithoutPostedByInput!]
  delete: [ProfileWhereUniqueInput!]
  connect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  disconnect: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [ProfileScalarWhereInput!]
  updateMany: [ProfileUpdateManyWithWhereNestedInput!]
}

input ProfileUpdateManyWithWhereNestedInput {
  where: ProfileScalarWhereInput!
  data: ProfileUpdateManyDataInput!
}

input ProfileUpdateWithoutPostedByDataInput {
  feet: Int
  inches: Int
  male: Boolean
  weight: Int
}

input ProfileUpdateWithWhereUniqueWithoutPostedByInput {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateWithoutPostedByDataInput!
}

input ProfileUpsertWithWhereUniqueWithoutPostedByInput {
  where: ProfileWhereUniqueInput!
  update: ProfileUpdateWithoutPostedByDataInput!
  create: ProfileCreateWithoutPostedByInput!
}

input ProfileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  postedBy: UserWhereInput
  feet: Int
  feet_not: Int
  feet_in: [Int!]
  feet_not_in: [Int!]
  feet_lt: Int
  feet_lte: Int
  feet_gt: Int
  feet_gte: Int
  inches: Int
  inches_not: Int
  inches_in: [Int!]
  inches_not_in: [Int!]
  inches_lt: Int
  inches_lte: Int
  inches_gt: Int
  inches_gte: Int
  male: Boolean
  male_not: Boolean
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
}

input ProfileWhereUniqueInput {
  id: ID
}

type Query {
  link(where: LinkWhereUniqueInput!): Link
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  stat(where: StatWhereUniqueInput!): Stat
  stats(where: StatWhereInput, orderBy: StatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stat]!
  statsConnection(where: StatWhereInput, orderBy: StatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StatConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  node(id: ID!): Node
}

type Stat {
  id: ID!
  postedBy: User
  deadlift: Int!
  squat: Int!
  benchpress: Int!
  shoulderpress: Int!
  sumopull: Int!
  frontsquat: Int!
}

type StatConnection {
  pageInfo: PageInfo!
  edges: [StatEdge]!
  aggregate: AggregateStat!
}

input StatCreateInput {
  id: ID
  postedBy: UserCreateOneWithoutStatsInput
  deadlift: Int!
  squat: Int!
  benchpress: Int!
  shoulderpress: Int!
  sumopull: Int!
  frontsquat: Int!
}

input StatCreateManyWithoutPostedByInput {
  create: [StatCreateWithoutPostedByInput!]
  connect: [StatWhereUniqueInput!]
}

input StatCreateWithoutPostedByInput {
  id: ID
  deadlift: Int!
  squat: Int!
  benchpress: Int!
  shoulderpress: Int!
  sumopull: Int!
  frontsquat: Int!
}

type StatEdge {
  node: Stat!
  cursor: String!
}

enum StatOrderByInput {
  id_ASC
  id_DESC
  deadlift_ASC
  deadlift_DESC
  squat_ASC
  squat_DESC
  benchpress_ASC
  benchpress_DESC
  shoulderpress_ASC
  shoulderpress_DESC
  sumopull_ASC
  sumopull_DESC
  frontsquat_ASC
  frontsquat_DESC
}

type StatPreviousValues {
  id: ID!
  deadlift: Int!
  squat: Int!
  benchpress: Int!
  shoulderpress: Int!
  sumopull: Int!
  frontsquat: Int!
}

input StatScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  deadlift: Int
  deadlift_not: Int
  deadlift_in: [Int!]
  deadlift_not_in: [Int!]
  deadlift_lt: Int
  deadlift_lte: Int
  deadlift_gt: Int
  deadlift_gte: Int
  squat: Int
  squat_not: Int
  squat_in: [Int!]
  squat_not_in: [Int!]
  squat_lt: Int
  squat_lte: Int
  squat_gt: Int
  squat_gte: Int
  benchpress: Int
  benchpress_not: Int
  benchpress_in: [Int!]
  benchpress_not_in: [Int!]
  benchpress_lt: Int
  benchpress_lte: Int
  benchpress_gt: Int
  benchpress_gte: Int
  shoulderpress: Int
  shoulderpress_not: Int
  shoulderpress_in: [Int!]
  shoulderpress_not_in: [Int!]
  shoulderpress_lt: Int
  shoulderpress_lte: Int
  shoulderpress_gt: Int
  shoulderpress_gte: Int
  sumopull: Int
  sumopull_not: Int
  sumopull_in: [Int!]
  sumopull_not_in: [Int!]
  sumopull_lt: Int
  sumopull_lte: Int
  sumopull_gt: Int
  sumopull_gte: Int
  frontsquat: Int
  frontsquat_not: Int
  frontsquat_in: [Int!]
  frontsquat_not_in: [Int!]
  frontsquat_lt: Int
  frontsquat_lte: Int
  frontsquat_gt: Int
  frontsquat_gte: Int
  AND: [StatScalarWhereInput!]
  OR: [StatScalarWhereInput!]
  NOT: [StatScalarWhereInput!]
}

type StatSubscriptionPayload {
  mutation: MutationType!
  node: Stat
  updatedFields: [String!]
  previousValues: StatPreviousValues
}

input StatSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StatWhereInput
  AND: [StatSubscriptionWhereInput!]
  OR: [StatSubscriptionWhereInput!]
  NOT: [StatSubscriptionWhereInput!]
}

input StatUpdateInput {
  postedBy: UserUpdateOneWithoutStatsInput
  deadlift: Int
  squat: Int
  benchpress: Int
  shoulderpress: Int
  sumopull: Int
  frontsquat: Int
}

input StatUpdateManyDataInput {
  deadlift: Int
  squat: Int
  benchpress: Int
  shoulderpress: Int
  sumopull: Int
  frontsquat: Int
}

input StatUpdateManyMutationInput {
  deadlift: Int
  squat: Int
  benchpress: Int
  shoulderpress: Int
  sumopull: Int
  frontsquat: Int
}

input StatUpdateManyWithoutPostedByInput {
  create: [StatCreateWithoutPostedByInput!]
  delete: [StatWhereUniqueInput!]
  connect: [StatWhereUniqueInput!]
  set: [StatWhereUniqueInput!]
  disconnect: [StatWhereUniqueInput!]
  update: [StatUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [StatUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [StatScalarWhereInput!]
  updateMany: [StatUpdateManyWithWhereNestedInput!]
}

input StatUpdateManyWithWhereNestedInput {
  where: StatScalarWhereInput!
  data: StatUpdateManyDataInput!
}

input StatUpdateWithoutPostedByDataInput {
  deadlift: Int
  squat: Int
  benchpress: Int
  shoulderpress: Int
  sumopull: Int
  frontsquat: Int
}

input StatUpdateWithWhereUniqueWithoutPostedByInput {
  where: StatWhereUniqueInput!
  data: StatUpdateWithoutPostedByDataInput!
}

input StatUpsertWithWhereUniqueWithoutPostedByInput {
  where: StatWhereUniqueInput!
  update: StatUpdateWithoutPostedByDataInput!
  create: StatCreateWithoutPostedByInput!
}

input StatWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  postedBy: UserWhereInput
  deadlift: Int
  deadlift_not: Int
  deadlift_in: [Int!]
  deadlift_not_in: [Int!]
  deadlift_lt: Int
  deadlift_lte: Int
  deadlift_gt: Int
  deadlift_gte: Int
  squat: Int
  squat_not: Int
  squat_in: [Int!]
  squat_not_in: [Int!]
  squat_lt: Int
  squat_lte: Int
  squat_gt: Int
  squat_gte: Int
  benchpress: Int
  benchpress_not: Int
  benchpress_in: [Int!]
  benchpress_not_in: [Int!]
  benchpress_lt: Int
  benchpress_lte: Int
  benchpress_gt: Int
  benchpress_gte: Int
  shoulderpress: Int
  shoulderpress_not: Int
  shoulderpress_in: [Int!]
  shoulderpress_not_in: [Int!]
  shoulderpress_lt: Int
  shoulderpress_lte: Int
  shoulderpress_gt: Int
  shoulderpress_gte: Int
  sumopull: Int
  sumopull_not: Int
  sumopull_in: [Int!]
  sumopull_not_in: [Int!]
  sumopull_lt: Int
  sumopull_lte: Int
  sumopull_gt: Int
  sumopull_gte: Int
  frontsquat: Int
  frontsquat_not: Int
  frontsquat_in: [Int!]
  frontsquat_not_in: [Int!]
  frontsquat_lt: Int
  frontsquat_lte: Int
  frontsquat_gt: Int
  frontsquat_gte: Int
  AND: [StatWhereInput!]
  OR: [StatWhereInput!]
  NOT: [StatWhereInput!]
}

input StatWhereUniqueInput {
  id: ID
}

type Subscription {
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  stat(where: StatSubscriptionWhereInput): StatSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  stats(where: StatWhereInput, orderBy: StatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stat!]
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  links: LinkCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
  stats: StatCreateManyWithoutPostedByInput
  profiles: ProfileCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutLinksInput {
  create: UserCreateWithoutLinksInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProfilesInput {
  create: UserCreateWithoutProfilesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutStatsInput {
  create: UserCreateWithoutStatsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutLinksInput {
  id: ID
  name: String!
  email: String!
  password: String!
  votes: VoteCreateManyWithoutUserInput
  stats: StatCreateManyWithoutPostedByInput
  profiles: ProfileCreateManyWithoutPostedByInput
}

input UserCreateWithoutProfilesInput {
  id: ID
  name: String!
  email: String!
  password: String!
  links: LinkCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
  stats: StatCreateManyWithoutPostedByInput
}

input UserCreateWithoutStatsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  links: LinkCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
  profiles: ProfileCreateManyWithoutPostedByInput
}

input UserCreateWithoutVotesInput {
  id: ID
  name: String!
  email: String!
  password: String!
  links: LinkCreateManyWithoutPostedByInput
  stats: StatCreateManyWithoutPostedByInput
  profiles: ProfileCreateManyWithoutPostedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  links: LinkUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
  stats: StatUpdateManyWithoutPostedByInput
  profiles: ProfileUpdateManyWithoutPostedByInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  update: UserUpdateWithoutVotesDataInput
  upsert: UserUpsertWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutLinksInput {
  create: UserCreateWithoutLinksInput
  update: UserUpdateWithoutLinksDataInput
  upsert: UserUpsertWithoutLinksInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutProfilesInput {
  create: UserCreateWithoutProfilesInput
  update: UserUpdateWithoutProfilesDataInput
  upsert: UserUpsertWithoutProfilesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutStatsInput {
  create: UserCreateWithoutStatsInput
  update: UserUpdateWithoutStatsDataInput
  upsert: UserUpsertWithoutStatsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutLinksDataInput {
  name: String
  email: String
  password: String
  votes: VoteUpdateManyWithoutUserInput
  stats: StatUpdateManyWithoutPostedByInput
  profiles: ProfileUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutProfilesDataInput {
  name: String
  email: String
  password: String
  links: LinkUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
  stats: StatUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutStatsDataInput {
  name: String
  email: String
  password: String
  links: LinkUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
  profiles: ProfileUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutVotesDataInput {
  name: String
  email: String
  password: String
  links: LinkUpdateManyWithoutPostedByInput
  stats: StatUpdateManyWithoutPostedByInput
  profiles: ProfileUpdateManyWithoutPostedByInput
}

input UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput!
  create: UserCreateWithoutLinksInput!
}

input UserUpsertWithoutProfilesInput {
  update: UserUpdateWithoutProfilesDataInput!
  create: UserCreateWithoutProfilesInput!
}

input UserUpsertWithoutStatsInput {
  update: UserUpdateWithoutStatsDataInput!
  create: UserCreateWithoutStatsInput!
}

input UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  links_every: LinkWhereInput
  links_some: LinkWhereInput
  links_none: LinkWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  stats_every: StatWhereInput
  stats_some: StatWhereInput
  stats_none: StatWhereInput
  profiles_every: ProfileWhereInput
  profiles_some: ProfileWhereInput
  profiles_none: ProfileWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Vote {
  id: ID!
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  user: User!
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  id: ID
  links: LinkCreateManyWithoutVotesInput
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutLinksInput {
  create: [VoteCreateWithoutLinksInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutLinksInput {
  id: ID
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutUserInput {
  id: ID
  links: LinkCreateManyWithoutVotesInput
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
}

type VotePreviousValues {
  id: ID!
}

input VoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
  AND: [VoteSubscriptionWhereInput!]
  OR: [VoteSubscriptionWhereInput!]
  NOT: [VoteSubscriptionWhereInput!]
}

input VoteUpdateInput {
  links: LinkUpdateManyWithoutVotesInput
  user: UserUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateManyWithoutLinksInput {
  create: [VoteCreateWithoutLinksInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutLinksInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutLinksInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateWithoutLinksDataInput {
  user: UserUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  links: LinkUpdateManyWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutLinksInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutLinksDataInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithWhereUniqueWithoutLinksInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutLinksDataInput!
  create: VoteCreateWithoutLinksInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  links_every: LinkWhereInput
  links_some: LinkWhereInput
  links_none: LinkWhereInput
  user: UserWhereInput
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
}

input VoteWhereUniqueInput {
  id: ID
}
`
      }
    